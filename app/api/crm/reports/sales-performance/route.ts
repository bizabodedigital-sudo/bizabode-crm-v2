import { NextRequest, NextResponse } from 'next/server'
import connectDB from '@/lib/mongodb'
import Lead from '@/lib/models/Lead'
import Opportunity from '@/lib/models/Opportunity'
import SalesOrder from '@/lib/models/SalesOrder'
import Activity from '@/lib/models/Activity'
import Task from '@/lib/models/Task'
import User from '@/lib/models/User'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export async function GET(request: NextRequest) {
  try {
    await connectDB()
    
    // Get user session
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const { searchParams } = new URL(request.url)
    const companyId = searchParams.get('companyId') || session.user.companyId
    const timeRange = searchParams.get('timeRange') || '30d'
    
    // Calculate date range
    const now = new Date()
    let startDate: Date
    
    switch (timeRange) {
      case '7d':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        break
      case '30d':
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
        break
      case '90d':
        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000)
        break
      case '1y':
        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)
        break
      default:
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    }
    
    // Get all sales reps
    const salesReps = await User.find({
      companyId,
      role: { $in: ['sales', 'admin'] }
    }).select('_id name email')
    
    const salesRepMetrics = []
    
    // Calculate metrics for each sales rep
    for (const rep of salesReps) {
      // Get leads generated by this rep
      const leadsGenerated = await Lead.countDocuments({
        companyId,
        assignedTo: rep._id,
        createdAt: { $gte: startDate }
      })
      
      // Get qualified leads
      const leadsQualified = await Lead.countDocuments({
        companyId,
        assignedTo: rep._id,
        status: { $in: ['qualified', 'opportunity'] },
        createdAt: { $gte: startDate }
      })
      
      // Get opportunities created
      const opportunitiesCreated = await Opportunity.countDocuments({
        companyId,
        assignedTo: rep._id,
        createdAt: { $gte: startDate }
      })
      
      // Get orders closed
      const ordersClosed = await SalesOrder.countDocuments({
        companyId,
        assignedTo: rep._id,
        status: { $in: ['Processing', 'Dispatched', 'Delivered'] },
        createdAt: { $gte: startDate }
      })
      
      // Get revenue
      const revenueResult = await SalesOrder.aggregate([
        {
          $match: {
            companyId,
            assignedTo: rep._id,
            status: { $in: ['Processing', 'Dispatched', 'Delivered'] },
            createdAt: { $gte: startDate }
          }
        },
        {
          $group: {
            _id: null,
            totalRevenue: { $sum: '$total' }
          }
        }
      ])
      
      const revenue = revenueResult.length > 0 ? revenueResult[0].totalRevenue : 0
      
      // Calculate conversion rate
      const conversionRate = leadsGenerated > 0 ? (ordersClosed / leadsGenerated) * 100 : 0
      
      // Calculate average deal size
      const averageDealSize = ordersClosed > 0 ? revenue / ordersClosed : 0
      
      // Get activities completed
      const activitiesCompleted = await Activity.countDocuments({
        companyId,
        assignedTo: rep._id,
        status: 'Completed',
        completedDate: { $gte: startDate }
      })
      
      // Get tasks completed
      const tasksCompleted = await Task.countDocuments({
        companyId,
        assignedTo: rep._id,
        status: 'Completed',
        completedDate: { $gte: startDate }
      })
      
      // Get last activity
      const lastActivity = await Activity.findOne({
        companyId,
        assignedTo: rep._id
      }).sort({ completedDate: -1 }).select('completedDate')
      
      salesRepMetrics.push({
        repId: rep._id,
        repName: rep.name,
        territory: 'General', // TODO: Add territory field to User model
        leadsGenerated,
        leadsQualified,
        opportunitiesCreated,
        ordersClosed,
        revenue,
        conversionRate,
        averageDealSize,
        activitiesCompleted,
        tasksCompleted,
        lastActivity: lastActivity?.completedDate?.toISOString() || null
      })
    }
    
    // Calculate territory metrics
    const territories = [
      {
        territory: 'General',
        totalLeads: salesRepMetrics.reduce((sum, rep) => sum + rep.leadsGenerated, 0),
        totalRevenue: salesRepMetrics.reduce((sum, rep) => sum + rep.revenue, 0),
        conversionRate: salesRepMetrics.length > 0 
          ? salesRepMetrics.reduce((sum, rep) => sum + rep.conversionRate, 0) / salesRepMetrics.length 
          : 0,
        topRep: salesRepMetrics.length > 0 
          ? salesRepMetrics.reduce((top, rep) => rep.revenue > top.revenue ? rep : top).repName 
          : 'N/A',
        growthRate: 8.5 // TODO: Calculate actual growth rate
      }
    ]
    
    // Calculate conversion funnel
    const totalLeads = salesRepMetrics.reduce((sum, rep) => sum + rep.leadsGenerated, 0)
    const totalQualified = salesRepMetrics.reduce((sum, rep) => sum + rep.leadsQualified, 0)
    const totalOpportunities = salesRepMetrics.reduce((sum, rep) => sum + rep.opportunitiesCreated, 0)
    const totalOrders = salesRepMetrics.reduce((sum, rep) => sum + rep.ordersClosed, 0)
    
    const conversionFunnel = [
      {
        stage: 'Leads Generated',
        count: totalLeads,
        percentage: 100,
        color: '#3b82f6'
      },
      {
        stage: 'Qualified Leads',
        count: totalQualified,
        percentage: totalLeads > 0 ? (totalQualified / totalLeads) * 100 : 0,
        color: '#8b5cf6'
      },
      {
        stage: 'Opportunities',
        count: totalOpportunities,
        percentage: totalLeads > 0 ? (totalOpportunities / totalLeads) * 100 : 0,
        color: '#f59e0b'
      },
      {
        stage: 'Orders Closed',
        count: totalOrders,
        percentage: totalLeads > 0 ? (totalOrders / totalLeads) * 100 : 0,
        color: '#10b981'
      }
    ]
    
    // Get top performers (top 5 by revenue)
    const topPerformers = salesRepMetrics
      .sort((a, b) => b.revenue - a.revenue)
      .slice(0, 5)
    
    return NextResponse.json({
      success: true,
      data: {
        salesReps: salesRepMetrics,
        territories,
        conversionFunnel,
        topPerformers
      }
    })
    
  } catch (error) {
    console.error('Sales performance report error:', error)
    return NextResponse.json({ 
      success: false,
      error: 'Failed to generate sales performance report' 
    }, { status: 500 })
  }
}
