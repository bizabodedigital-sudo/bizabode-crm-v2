import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import { Item } from '@/lib/models/Item';

export async function GET(request: NextRequest) {
  try {
    await connectDB();
    
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const format = searchParams.get('format') || 'csv';
    const companyId = searchParams.get('companyId');
    
    // Build query
    const query: any = {};
    if (companyId) {
      query.companyId = companyId;
    }
    
    // Fetch all items
    const items = await Item.find(query).sort({ createdAt: -1 });
    
    if (format === 'pdf') {
      // Generate HTML for PDF
      const html = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Inventory Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .summary { margin-bottom: 20px; padding: 15px; background: #f5f5f5; border-radius: 5px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; font-weight: bold; }
            .low-stock { background-color: #fff3cd; }
            .out-of-stock { background-color: #f8d7da; }
            .critical { font-weight: bold; color: #dc3545; }
            .footer { margin-top: 30px; text-align: center; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Inventory Report</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="summary">
            <h3>Summary</h3>
            <p><strong>Total Items:</strong> ${items.length}</p>
            <p><strong>Total Value:</strong> $${items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0).toFixed(2)}</p>
            <p><strong>Low Stock Items:</strong> ${items.filter(item => item.quantity <= item.reorderLevel && item.quantity > 0).length}</p>
            <p><strong>Out of Stock Items:</strong> ${items.filter(item => item.quantity === 0).length}</p>
          </div>
          
          <table>
            <thead>
              <tr>
                <th>SKU</th>
                <th>Name</th>
                <th>Category</th>
                <th>Quantity</th>
                <th>Reorder Level</th>
                <th>Unit Price</th>
                <th>Total Value</th>
                <th>Status</th>
                <th>Critical</th>
              </tr>
            </thead>
            <tbody>
              ${items.map(item => {
                const status = item.quantity === 0 ? 'Out of Stock' : 
                              item.quantity <= item.reorderLevel ? 'Low Stock' : 'In Stock';
                const rowClass = item.quantity === 0 ? 'out-of-stock' : 
                                item.quantity <= item.reorderLevel ? 'low-stock' : '';
                const criticalClass = item.critical ? 'critical' : '';
                const totalValue = item.quantity * item.unitPrice;
                
                return `
                  <tr class="${rowClass}">
                    <td>${item.sku}</td>
                    <td class="${criticalClass}">${item.name}</td>
                    <td>${item.category}</td>
                    <td>${item.quantity}</td>
                    <td>${item.reorderLevel}</td>
                    <td>$${item.unitPrice.toFixed(2)}</td>
                    <td>$${totalValue.toFixed(2)}</td>
                    <td>${status}</td>
                    <td>${item.critical ? 'Yes' : 'No'}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
          
          <div class="footer">
            <p>Report generated by Bizabode CRM</p>
          </div>
        </body>
        </html>
      `;
      
      return new NextResponse(html, {
        headers: {
          'Content-Type': 'text/html',
          'Content-Disposition': `attachment; filename="inventory-report-${new Date().toISOString().split('T')[0]}.html"`,
        },
      });
    }
    
    // Generate CSV
    const csvHeaders = [
      'SKU',
      'Name', 
      'Category',
      'Description',
      'Quantity',
      'Reorder Level',
      'Unit Price',
      'Cost Price',
      'Total Value',
      'Status',
      'Critical',
      'Created At',
      'Updated At'
    ];
    
    const csvRows = items.map(item => {
      const status = item.quantity === 0 ? 'Out of Stock' : 
                    item.quantity <= item.reorderLevel ? 'Low Stock' : 'In Stock';
      const totalValue = item.quantity * item.unitPrice;
      
      return [
        item.sku,
        `"${item.name}"`,
        item.category,
        `"${item.description || ''}"`,
        item.quantity,
        item.reorderLevel,
        item.unitPrice.toFixed(2),
        (item.costPrice || item.unitPrice).toFixed(2),
        totalValue.toFixed(2),
        status,
        item.critical ? 'Yes' : 'No',
        new Date(item.createdAt).toLocaleDateString(),
        new Date(item.updatedAt).toLocaleDateString()
      ];
    });
    
    const csvContent = [
      csvHeaders.join(','),
      ...csvRows.map(row => row.join(','))
    ].join('\n');
    
    return new NextResponse(csvContent, {
      headers: {
        'Content-Type': 'text/csv',
        'Content-Disposition': `attachment; filename="inventory-${new Date().toISOString().split('T')[0]}.csv"`,
      },
    });
    
  } catch (error) {
    console.error('Failed to export inventory:', error);
    return NextResponse.json(
      { error: 'Failed to export inventory data' },
      { status: 500 }
    );
  }
}
