import PDFDocument from 'pdfkit'

export interface InventoryItem {
  _id: string
  sku: string
  name: string
  category: string
  description?: string
  quantity: number
  reorderLevel: number
  unitPrice: number
  costPrice: number
  supplier?: string
  location?: string
  critical: boolean
  updatedAt: Date
}

export interface Company {
  _id: string
  name: string
  address?: string
  phone?: string
  email?: string
  website?: string
}

export async function generateInventoryTemplate(
  items: InventoryItem[],
  company?: Company | null
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 })
      const chunks: Buffer[] = []

      doc.on('data', (chunk) => chunks.push(chunk))
      doc.on('end', () => resolve(Buffer.concat(chunks)))
      doc.on('error', reject)

      // Header
      doc.fontSize(20).text(company?.name || 'Company', { align: 'center' })
      doc.fontSize(16).text('Inventory Stock Check', { align: 'center' })
      doc.fontSize(12).text(`Generated on: ${new Date().toLocaleDateString()}`, { align: 'center' })
      doc.moveDown(2)

      // Summary
      const totalItems = items.length
      const lowStockItems = items.filter(item => item.quantity <= item.reorderLevel).length
      const criticalItems = items.filter(item => item.critical).length

      doc.fontSize(14).text('Summary:', { underline: true })
      doc.fontSize(12).text(`Total Items: ${totalItems}`)
      doc.text(`Low Stock Items: ${lowStockItems}`)
      doc.text(`Critical Items: ${criticalItems}`)
      doc.moveDown(1)

      // Table header
      doc.fontSize(12).text('Inventory Details:', { underline: true })
      doc.moveDown(0.5)

      // Table data
      const tableTop = doc.y
      const itemHeight = 20
      const colWidths = [80, 120, 80, 60, 60, 60, 80] // SKU, Name, Category, Stock, Reorder, Price, Status
      const colPositions = [50, 130, 250, 310, 370, 430, 490]

      // Table headers
      doc.fontSize(10).text('SKU', colPositions[0], tableTop)
      doc.text('Item Name', colPositions[1], tableTop)
      doc.text('Category', colPositions[2], tableTop)
      doc.text('Stock', colPositions[3], tableTop)
      doc.text('Reorder', colPositions[4], tableTop)
      doc.text('Price', colPositions[5], tableTop)
      doc.text('Status', colPositions[6], tableTop)

      // Draw header line
      doc.moveTo(50, tableTop + 15).lineTo(570, tableTop + 15).stroke()

      let currentY = tableTop + 20

      // Table rows
      items.forEach((item, index) => {
        if (currentY > 700) { // New page if needed
          doc.addPage()
          currentY = 50
        }

        const status = item.quantity === 0 ? 'Out of Stock' : 
                     item.quantity <= item.reorderLevel ? 'Low Stock' : 'In Stock'

        doc.fontSize(9)
          .text(item.sku, colPositions[0], currentY)
          .text(item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name, colPositions[1], currentY)
          .text(item.category, colPositions[2], currentY)
          .text(item.quantity.toString(), colPositions[3], currentY)
          .text(item.reorderLevel.toString(), colPositions[4], currentY)
          .text(`$${item.unitPrice.toFixed(2)}`, colPositions[5], currentY)
          .text(status, colPositions[6], currentY)

        currentY += itemHeight
      })

      // Footer
      doc.fontSize(10).text(
        `Page ${doc.page.number} - Generated by Bizabode CRM`,
        { align: 'center' }
      )

      doc.end()
    } catch (error) {
      reject(error)
    }
  })
}
